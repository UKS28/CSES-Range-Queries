step 1: Make a segment tree considering an array of size n having each element value 1 { arr[i]=1}
step 2: for any query  we will find the actual index in the array and then printout the answer.
step 3: for step 2 we will use binary search to query in seg tree.

consider at any moment we have removed ele at index 0 and 2 then we were asked for position 2 which is atually index 4 , so we find out till  
which min index (k) from 0 to k the sum is equal to postion , this minimum index is our answer.


#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define rep(st, k) for (long long i = st; i < k; i++)

class sgTree
{
public:
  vector<int> tree;
  sgTree(int n)
  {
    tree.resize(4 * n + 1);
  }

  void build(int si, int ss, int se)
  {
    if (ss == se)
    {
      tree[si] = 1;
      return;
    }
    int mid = ss + (se - ss) / 2;
    build(2 * si + 1, ss, mid);
    build(2 * si + 2, mid + 1, se);
    tree[si] = tree[2 * si + 1] + tree[2 * si + 2];
  }

  int query(int si, int ss, int se, int l, int r)
  {
    if (ss > r || se < l)
      return 0;
    if (ss >= l && se <= r)
      return tree[si];

    int mid = ss + (se - ss) / 2;
    return query(2 * si + 1, ss, mid, l, r) + query(2 * si + 2, mid + 1, se, l, r);
  }

  void update(int si, int ss, int se, int pos)
  {
    if (ss == se)
    {
      tree[si] = 0;
      return;
    }

    int mid = ss + (se - ss) / 2;
    if (pos <= mid && pos >= ss)
      update(2 * si + 1, ss, mid, pos);
    else
      update(2 * si + 2, mid + 1, se, pos);
    tree[si] = tree[2 * si + 1] + tree[2 * si + 2];
  }
};

int main()
{
  int n, m;
  cin >> n;
  m = n;
  vector<int> arr(n);
  rep(0, n)
          cin >>
      arr[i];

  sgTree st(n);
  st.build(0, 0, n - 1);
  // for(int i=0;i<=8;i++)cout<<st.tree[i]<<' ';
  // cout<<endl;
  while (m--)
  {
    int pos;
    cin >> pos;
    // cout<<"for position "<<pos<<endl;
    int l = 0, r = n - 1;
    int res = -1;
    while (l <= r)
    {
      int mid = l + (r - l) / 2;
      int sum = st.query(0, 0, n - 1, 0, mid);
      // cout<<mid <<"  "<<sum<<endl;
      if (sum == pos)
      {
        res = mid;
        r = mid - 1;
      }
      else if (sum > pos)
        r = mid - 1;
      else
        l = mid + 1;
    }
    cout << arr[res] << " ";
    st.update(0, 0, n - 1, res);
    // for(int i=0;i<=8;i++)cout<<st.tree[i]<<' ';
    // cout<<endl;
  }
}
